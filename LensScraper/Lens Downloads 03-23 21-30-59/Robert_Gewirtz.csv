"#",Jurisdiction,Kind,Display Key,Lens ID,Publication Date,Publication Year,Application Number,Application Date,Priority Numbers,Earliest Priority Date,Title,Abstract,Applicants,Inventors,Owners,URL,Document Type,Has Full Text,Cites Patent Count,Cited by Patent Count,Simple Family Size,Extended Family Size,Sequence Count,CPC Classifications,IPCR Classifications,US Classifications,NPL Citation Count,NPL Resolved Citation Count,NPL Resolved Lens ID(s),NPL Resolved External ID(s),NPL Citations,Legal Status
1,US,A1,US 2004/0049270 A1,081-456-083-730-547,2004-03-11,2004,US 23832602 A,2002-09-10,US 23832602 A,2002-09-10,Bone graft device,"
   A bone graft device adapted to be received in an implant site in a patient, including, for example without limitation, an anterior spinal resection of one or more vertebrae of a spinal column of the patient. The bone graft implant site can be defined as a resection formed in any damaged or injured bone tissue, which can be, for further example, the spinal column resection that is formed between an inferior vertebral surface that confronts a superior vertebral surface where between one or more vertebral bodies and or vertebral discs or portions thereof have been removed to establish the implant site. The bone graft device includes a plurality of pseudo-vertebrae that are each formed with a transverse cross-sectional profile sized for implant in the anterior spinal resection. The pseudo vertebrae can be wedge-shaped and are stacked on at least one stanchion that can be centrally positioned or spaced apart. At least one of the plurality of pseudo-vertebrae defines an exteriorly facing sill that is adapted to be frictionally confronting and received against at least one of the inferior and superior vertebral surfaces to maximize frictional contact between the sill and at least one of the surfaces. Each pseudo-vertebral sill is sized and shaped to be equal to or smaller than the cross-section of the vertebral bodies defining the superior and inferior vertebral body surfaces so as to not invade the vertebral channel of the spinal column when the bone graft device is introduced into and received in the resection. 
",GEWIRTZ ROBERT J.,GEWIRTZ ROBERT J,,https://lens.org/081-456-083-730-547,Patent Application,yes,3,170,3,3,0,A61F2/28;;A61F2/28;;A61F2/44;;A61F2/44;;A61F2/4465;;A61F2/4465;;A61F2002/30113;;A61F2002/30113;;A61F2002/30125;;A61F2002/30125;;A61F2002/30133;;A61F2002/30133;;A61F2002/30156;;A61F2002/30156;;A61F2002/30433;;A61F2002/30433;;A61F2002/30604;;A61F2002/30604;;A61F2002/30616;;A61F2002/30616;;A61F2002/3071;;A61F2002/3071;;A61F2002/30785;;A61F2002/30785;;A61F2220/0041;;A61F2220/0041;;A61F2230/0006;;A61F2230/0006;;A61F2230/0008;;A61F2230/0008;;A61F2230/0015;;A61F2230/0015;;A61F2230/0023;;A61F2230/0023;;A61F2250/0085;;A61F2250/0085,A61F2/00;;A61F2/28;;A61F2/30;;A61F2/44,623/17.11;;606/61,0,0,,,,DISCONTINUED
2,AU,A1,AU 2003/270474 A1,081-639-238-072-094,2004-04-30,2004,AU 2003/270474 A,2003-09-09,US 23832602 A;;US 0328305 W,2002-09-10,BONE GRAFT DEVICE,,GEWIRTZ ROBERT J,GEWIRTZ ROBERT J,,https://lens.org/081-639-238-072-094,Patent Application,no,0,0,3,3,0,A61F2/28;;A61F2/28;;A61F2/44;;A61F2/44;;A61F2/4465;;A61F2/4465;;A61F2002/30113;;A61F2002/30113;;A61F2002/30125;;A61F2002/30125;;A61F2002/30133;;A61F2002/30133;;A61F2002/30156;;A61F2002/30156;;A61F2002/30433;;A61F2002/30433;;A61F2002/30604;;A61F2002/30604;;A61F2002/30616;;A61F2002/30616;;A61F2002/3071;;A61F2002/3071;;A61F2002/30785;;A61F2002/30785;;A61F2220/0041;;A61F2220/0041;;A61F2230/0006;;A61F2230/0006;;A61F2230/0008;;A61F2230/0008;;A61F2230/0015;;A61F2230/0015;;A61F2230/0023;;A61F2230/0023;;A61F2250/0085;;A61F2250/0085,A61F2/00;;A61F2/28;;A61F2/30;;A61F2/44,,0,0,,,,DISCONTINUED
3,WO,A1,WO 2004/024038 A1,021-296-598-040-282,2004-03-25,2004,US 0328305 W,2003-09-09,US 23832602 A,2002-09-10,BONE GRAFT DEVICE,"A bone graft device (100)including a plurality of pseudo-vertebrae (110) that are each formed with a transverse cross-sectional profile sized for implantation in the anterior spinal area. The pseudo vertebrae can be wedge-shaped and are stacked on at least on stanchion that can be centrally positioned or spaced apart. At least one of the plurality of pseudo-vertebrae defines an exteriorly facing sill (125) that engages at least one of the inferior and superior vertebral surfaces (IVS, SVS) to maximize frictional contact between the sill and at least one of the surfaces. Each pseudo-vertebral sill is sized and shaped to be equal to or smaller than the cross-section of the vertebral bodies (C,T) defining the superior and inferior vertebral body surfaces so as to not invad the vertebral channel of the spinal column (S) when the bone graft device (100) is introduced into a resected area.",GEWIRTZ ROBERT J,GEWIRTZ ROBERT J,,https://lens.org/021-296-598-040-282,Patent Application,yes
4,EP,A1,EP 2388705 A1,101-105-975-713-856,2011-11-23,2011,EP 11166730 A,2011-05-19,US 78427610 A,2010-05-20,Method and apparatus for accessing cache memory,"A request for reading data from a memory location of a main memory is received, the memory location being identified by a physical memory address. In response to the request, a cache memory is accessed based on the physical memory address to determine whether the cache memory contains the data being requested. The data associated with the request is returned from the cache memory without accessing the memory location if there is a cache hit. The data associated is returned from the main memory if there is a cache miss. In response to the cache miss, it is determined whether there have been a number of accesses within a predetermined period of time. A cache entry is allocated from the cache memory to cache the data if there have been a predetermined number of accesses within the predetermined period of time.
",ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT,,https://lens.org/101-105-975-713-856,Patent Application,yes,0,2,3,3,0,G06F12/0888;;G06F12/0888;;G06F12/12,G06F12/08,,1,1,003-858-502-428-549,10.1109/hpca.2010.5416642,"XIAOWEI JIANG ET AL: ""CHOP: Adaptive filter-based DRAM caching for CMP server platforms"", HIGH PERFORMANCE COMPUTER ARCHITECTURE (HPCA), 2010 IEEE 16TH INTERNATIONAL SYMPOSIUM ON, IEEE, PISCATAWAY, NJ, USA, 9 January 2010 (2010-01-09), pages 1 - 12, XP031640712, ISBN: 978-1-4244-5658-1",DISCONTINUED
5,US,A1,US 2011/0289257 A1,091-310-671-951-152,2011-11-24,2011,US 78427610 A,2010-05-20,US 78427610 A,2010-05-20,METHOD AND APPARATUS FOR ACCESSING CACHE MEMORY,"A request for reading data from a memory location of a main memory is received, the memory location being identified by a physical memory address. In response to the request, a cache memory is accessed based on the physical memory address to determine whether the cache memory contains the data being requested. The data associated with the request is returned from the cache memory without accessing the memory location if there is a cache hit. The data associated is returned from the main memory if there is a cache miss. In response to the cache miss, it is determined whether there have been a number of accesses within a predetermined period of time. A cache entry is allocated from the cache memory to cache the data if there have been a predetermined number of accesses within the predetermined period of time.",HATHAWAY ROBERT;;GEWIRTZ EVAN;;ERICSSON TELEFON AB L M,HATHAWAY ROBERT;;GEWIRTZ EVAN,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) A CORPORATION OF SWEDEN (2010-05-17),https://lens.org/091-310-671-951-152,Patent Application,yes,3,19,3,3,0,G06F12/0888;;G06F12/0888;;G06F12/12,G06F12/08;;G06F12/00,711/3;;711/144;;711/141;;X711E12001;;X711E12025,1,0,,,"Jim Handy, The Cache Memory Book, Academic Press,1998, second edition, pages 50-51 and 67-68",INACTIVE
6,US,B2,US 8914581 B2,153-082-836-638-953,2014-12-16,2014,US 78427610 A,2010-05-20,US 78427610 A,2010-05-20,Method and apparatus for accessing cache memory,"A request for reading data from a memory location of a main memory is received, the memory location being identified by a physical memory address. In response to the request, a cache memory is accessed based on the physical memory address to determine whether the cache memory contains the data being requested. The data associated with the request is returned from the cache memory without accessing the memory location if there is a cache hit. The data associated is returned from the main memory if there is a cache miss. In response to the cache miss, it is determined whether there have been a number of accesses within a predetermined period of time. A cache entry is allocated from the cache memory to cache the data if there have been a predetermined number of accesses within the predetermined period of time.",HATHAWAY ROBERT;;GEWIRTZ EVAN;;ERICSSON TELEFON AB L M,HATHAWAY ROBERT;;GEWIRTZ EVAN,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) A CORPORATION OF SWEDEN (2010-05-17),https://lens.org/153-082-836-638-953,Granted Patent,yes,3,7,3,3,0,G06F12/0888;;G06F12/0888;;G06F12/12,G06F12/12;;G06F12/08,711/133,2,1,003-858-502-428-549,10.1109/hpca.2010.5416642,"Jim Handy, The Cache Memory Book, Academic Press,1998, second edition, pp. 50-51 and 67-68.;;Xiaowei Jiang et al., ""CHOP: Adaptive Filter-Based DRAM Caching for CMP Server Platforms"", Jan. 9, 2010, pp. 1-12, 2010 IEEE 16th International Symposium on High Performance Computer Architecture (HPCA), Piscataway, New Jersey.",INACTIVE
7,US,B1,US 8051227 B1,062-720-394-825-747,2011-11-01,2011,US 77708410 A,2010-05-10,US 77708410 A,2010-05-10,Programmable queue structures for multiprocessors,"A command is received from a first agent via a first predetermined memory-mapped register, the first agent being one of multiple agents representing software processes, each being executed by one of processor cores of a network processor in a network element. A first queue associated with the command is identified based on the first predetermined memory-mapped register. A pointer is atomically read from a first hardware-based queue state register associated with the first queue. Data is atomically accessed at a memory location of the memory based on the pointer. The pointer stored in the first hardware-based queue state register is atomically updated, including incrementing the pointer of the first hardware-based queue state register, reading a queue size of the queue from a first hardware-based configuration register associated with the first queue, and wrapping around the pointer if the pointer reaches an end of the first queue based on the queue size.",ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;MEIER STEPHAN,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) A CORPORATION OF SWEDEN (2010-03-22),https://lens.org/062-720-394-825-747,Granted Patent,yes,5,24,4,4,0,G06F9/544;;G06F9/544;;G06F9/52;;G06F9/52,G06F3/00;;G06F13/00,710/56;;711/146,0,0,,,,INACTIVE
8,EP,A1,EP 2386962 A1,187-963-342-068-325,2011-11-16,2011,EP 11164626 A,2011-05-03,US 77708410 A,2010-05-10,Programmable queue structures for multiprocessors,"A command is received from a first agent via a first predetermined memory-mapped register, the first agent being one of multiple agents representing software processes, each being executed by one of processor cores of a network processor in a network element. A first queue associated with the command is identified based on the first predetermined memory-mapped register. A pointer is atomically read from a first hardware-based queue state register associated with the first queue. Data is atomically accessed at a memory location of the memory based on the pointer. The pointer stored in the first hardware-based queue state register is atomically updated, including incrementing the pointer of the first hardware-based queue state register, reading a queue size of the queue from a first hardware-based configuration register associated with the first queue, and wrapping around the pointer if the pointer reaches an end of the first queue based on the queue size.
",ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;MEIER STEPHAN,,https://lens.org/187-963-342-068-325,Patent Application,yes,0,3,4,4,0,G06F9/544;;G06F9/544;;G06F9/52;;G06F9/52,G06F15/167,,2,2,016-406-074-773-649;;127-392-846-303-867,10.1016/0165-6074(92)90131-p;;10.1109/40.342014,"SU S-C ET AL: ""A memory-mapped interprocessor communication architecture using FIFO RAMs"", MICROPROCESSING AND MICROPROGRAMMING, ELSEVIER SCIENCE PUBLISHERS, BV., AMSTERDAM, NL, vol. 34, no. 1-5, 1 February 1992 (1992-02-01), pages 187 - 191, XP024233494, ISSN: 0165-6074, [retrieved on 19920201], DOI: 10.1016/0165-6074(92)90131-P;;MATTHIAS BLUMRICH ET AL: ""Virtual-Memory-Mapped Network Interfaces"", IEEE MICRO, vol. 15, no. 1, 1 February 1995 (1995-02-01), pages 21 - 28, XP055007890, ISSN: 0272-1732, DOI: 10.1109/40.342014",ACTIVE
9,US,A1,US 2011/0276732 A1,063-562-989-539-526,2011-11-10,2011,US 77708410 A,2010-05-10,US 77708410 A,2010-05-10,PROGRAMMABLE QUEUE STRUCTURES FOR MULTIPROCESSORS,"A command is received from a first agent via a first predetermined memory-mapped register, the first agent being one of multiple agents representing software processes, each being executed by one of processor cores of a network processor in a network element. A first queue associated with the command is identified based on the first predetermined memory-mapped register. A pointer is atomically read from a first hardware-based queue state register associated with the first queue. Data is atomically accessed at a memory location of the memory based on the pointer. The pointer stored in the first hardware-based queue state register is atomically updated, including incrementing the pointer of the first hardware-based queue state register, reading a queue size of the queue from a first hardware-based configuration register associated with the first queue, and wrapping around the pointer if the pointer reaches an end of the first queue based on the queue size.",ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;MEIER STEPHAN,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) A CORPORATION OF SWEDEN (2010-03-22),https://lens.org/063-562-989-539-526,Patent Application,yes,0,5,4,4,0,G06F9/544;;G06F9/544;;G06F9/52;;G06F9/52,G06F5/16,710/56,0,0,,,,INACTIVE
10,EP,B1,EP 2386962 B1,064-507-944-789-235,2014-04-02,2014,EP 11164626 A,2011-05-03,US 77708410 A,2010-05-10,Programmable queue structures for multiprocessors,,ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;MEIER STEPHAN,,https://lens.org/064-507-944-789-235,Granted Patent,yes,0,0,4,4,0,G06F9/544;;G06F9/544;;G06F9/52;;G06F9/52,G06F15/167,,2,0,,,"SU S-C ET AL: ""A memory-mapped interprocessor communication architecture using FIFO RAMs"", MICROPROCESSING AND MICROPROGRAMMING, ELSEVIER SCIENCE PUBLISHERS, BV., AMSTERDAM, NL, vol. 34, no. 1-5, 1 February 1992 (1992-02-01), pages 187-191, XP024233494, ISSN: 0165-6074, DOI: 10.1016/0165-6074(92)90131-P [retrieved on 1992-02-01];;MATTHIAS BLUMRICH ET AL: ""Virtual-Memory-Mapped Network Interfaces"", IEEE MICRO, vol. 15, no. 1, 1 February 1995 (1995-02-01), pages 21-28, XP55007890, ISSN: 0272-1732, DOI: 10.1109/40.342014",ACTIVE
11,WO,A1,WO 2011/141837 A1,150-365-084-475-469,2011-11-17,2011,IB 2011051762 W,2011-04-21,US 77708710 A,2010-05-10,HIERARCHICAL MULTITHREADED PROCESSING,"In one embodiment, a current candidate thread is selected from each of multiple first groups of threads using a low granularity selection scheme, where each of the first groups includes multiple threads and first groups are mutually exclusive. A second group of threads is formed comprising the current candidate thread selected from each of the first groups of threads. A current winning thread is selected from the second group of threads using a high granularity selection scheme. An instruction is fetched from a memory based on a fetch address for a next instruction of the current winning thread. The instruction is then dispatched to one of the execution units for execution, whereby execution stalls of the execution units are reduced by fetching instructions based on the low granularity and high granularity selection schemes.",ERICSSON TELEFON AB L M;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;MEIER STEPHAN;;HO EDWARD,GEWIRTZ EVAN;;HATHAWAY ROBERT;;MEIER STEPHAN;;HO EDWARD,,https://lens.org/150-365-084-475-469,Patent Application,yes,3,2,4,4,0,G06F9/3802;;G06F9/3851;;G06F9/3851;;G06F9/3802,G06F9/38,,0,0,,,,PENDING
12,US,A1,US 2014/0181474 A1,187-896-777-547-66X,2014-06-26,2014,US 201213727282 A,2012-12-26,US 201213727282 A,2012-12-26,ATOMIC WRITE AND READ MICROPROCESSOR INSTRUCTIONS,"Methods and apparatus for performing an atomic hardware operation (HWOP) instruction. According to a method in a computer processor coupled to a memory, the method includes fetching, decoding, and executing the atomic HWOP instruction. The instruction includes a source operand indicating a source location and a destination operand indicating a destination location, wherein each of the source location and the destination location is either a register of the computer processor or an address of the memory. Executing the atomic HWOP instruction includes sending a message to an external agent to cause the external agent to atomically access a set of one or more memory locations of the memory based upon a value stored at the source location, and return a result obtained from said atomic access of the set of memory locations to the destination location. The external agent is external to the computer processor.",ERICSSON TELEFON AB L M;;ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;HO EDWARD;;MEIER STEPHAN,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) (2012-12-19),https://lens.org/187-896-777-547-66X,Patent Application,yes,0,16,3,3,0,G06F9/3004;;G06F9/3834;;G06F9/52;;G06F9/3004;;G06F9/3834,G06F9/52,712/206,3,1,020-729-265-206-090,10.1109/12.48865,"Levels of Programming Languages, Oct 31 2001, 2 pages, [retrived from the internet on 11/10/2015], retrieved from URL;;Hennessy and Patterson, Computer Architecture A Quantitative Approach, 1996, Second edition, 4 pages;;Sohi, Instruction Issue logic for high performance, interruptible, multiple functional unit, pipelined computers, March 1990, IEEE TRANSACTIONS ON COMPUTERS, VOL. 39, NO. 3, pages 349-359",DISCONTINUED
13,US,A1,US 2011/0276784 A1,008-886-531-346-091,2011-11-10,2011,US 77708710 A,2010-05-10,US 77708710 A,2010-05-10,HIERARCHICAL MULTITHREADED PROCESSING,"In one embodiment, a current candidate thread is selected from each of multiple first groups of threads using a low granularity selection scheme, where each of the first groups includes multiple threads and first groups are mutually exclusive. A second group of threads is formed comprising the current candidate thread selected from each of the first groups of threads. A current winning thread is selected from the second group of threads using a high granularity selection scheme. An instruction is fetched from a memory based on a fetch address for a next instruction of the current winning thread. The instruction is then dispatched to one of the execution units for execution, whereby execution stalls of the execution units are reduced by fetching instructions based on the low granularity and high granularity selection schemes.",ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;MEIER STEPHAN;;HO EDWARD,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) A CORPORATION OF SWEDEN (2010-03-22),https://lens.org/008-886-531-346-091,Patent Application,yes,11,14,4,4,0,G06F9/3802;;G06F9/3851;;G06F9/3851;;G06F9/3802,G06F9/312;;G06F9/30,712/205;;712/214;;712/216;;X712E09028;;X712E09033,1,1,111-207-670-000-134,10.1145/232973.232993,"Tullsen, ""Explointing Choice: Instruction Fetch and Issue on an Implementable Simultaneous Multithreading Processor"", 22 May 1996, ACM/IEEE, Proceedings of the 23Rd Annual Symposium on Computer Architecture, pages 191-202",DISCONTINUED
14,EP,A1,EP 2569696 A1,141-456-678-229-414,2013-03-20,2013,EP 11725198 A,2011-04-21,US 77708710 A;;IB 2011051762 W,2010-05-10,HIERARCHICAL MULTITHREADED PROCESSING,,ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;MEIER STEPHAN;;HO EDWARD,,https://lens.org/141-456-678-229-414,Patent Application,yes,0,0,4,4,0,G06F9/3802;;G06F9/3851;;G06F9/3851;;G06F9/3802,G06F9/38,,0,0,,,,DISCONTINUED
15,EP,A1,EP 2939108 A1,043-411-812-672-571,2015-11-04,2015,EP 13828936 A,2013-12-12,US 201213727282 A;;IB 2013060888 W,2012-12-26,ATOMIC WRITE AND READ MICROPROCESSOR INSTRUCTIONS,,ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;HO EDWARD;;MEIER STEPHAN,,https://lens.org/043-411-812-672-571,Patent Application,yes,0,0,3,3,0,G06F9/3004;;G06F9/3834;;G06F9/52;;G06F9/3004;;G06F9/3834,G06F9/30;;G06F9/38;;G06F15/78,,0,0,,,,DISCONTINUED
16,WO,A1,WO 2014/102646 A1,136-043-377-150-888,2014-07-03,2014,IB 2013060888 W,2013-12-12,US 201213727282 A,2012-12-26,ATOMIC WRITE AND READ MICROPROCESSOR INSTRUCTIONS,"Methods and apparatus for performing an atomic hardware operation (HWOP) instruction. According to a method in a computer processor coupled to a memory, the method includes fetching, decoding, and executing the atomic HWOP instruction. The instruction includes a source operand indicating a source location and a destination operand indicating a destination location, wherein each of the source location and the destination location is either a register of the computer processor or an address of the memory. Executing the atomic HWOP instruction includes sending a message to an external agent to cause the external agent to atomically access a set of one or more memory locations of the memory based upon a value stored at the source location, and return a result obtained from said atomic access of the set of memory locations to the destination location. The external agent is external to the computer processor.",ERICSSON TELEFON AB L M,GEWIRTZ EVAN;;HATHAWAY ROBERT;;HO EDWARD;;MEIER STEPHAN,,https://lens.org/136-043-377-150-888,Patent Application,yes,7,1,3,3,0,G06F9/3004;;G06F9/3834;;G06F9/52;;G06F9/3004;;G06F9/3834,G06F9/30;;G06F9/38;;G06F15/78,,0,0,,,,PENDING
17,US,A1,US 2012/0173841 A1,051-659-942-320-581,2012-07-05,2012,US 98313010 A,2010-12-31,US 98313010 A,2010-12-31,Explicitly Regioned Memory Organization in a Network Element,"A network element that includes multiple memory types and memory sizes translates a logical memory address into a physical memory address. A memory access request is received for a data structure with a logical memory address that includes a region identifier that identifies a region that is mapped to one or more memories and is associated with a set of one or more region attributes whose values are based on processing requirements provided by a software programmer and the available memories of the network element. The network element accesses the region mapping table entry corresponding to the region identifier and, using the region attributes that are associated with the region, determines an access target for the request, determines a physical memory address offset within the access target, and generates a physical memory address. The access target includes a target class of memory, an instance within the class of memory, and a particular physical address space of the instance within the class of memory. The physical memory address includes a network routing information portion that includes information to route the physical memory address to the target instance, and includes an address payload portion that includes information to identify the physical address space identified by the subtarget and the physical memory address offset.",MEIER STEPHAN;;HATHAWAY ROBERT;;GEWIRTZ EVAN;;ALLEYNE BRIAN;;HO EDWARD,MEIER STEPHAN;;HATHAWAY ROBERT;;GEWIRTZ EVAN;;ALLEYNE BRIAN;;HO EDWARD,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) (2011-03-09),https://lens.org/051-659-942-320-581,Patent Application,yes,2,18,4,4,0,G06F12/1009;;G06F2213/0038;;Y02D10/00;;G06F12/0292;;G06F12/1009;;G06F2213/0038;;Y02D10/00,G06F12/10,711/202;;X711E12058,0,0,,,,INACTIVE
18,EP,B1,EP 2472412 B1,058-176-224-731-042,2013-05-08,2013,EP 11193485 A,2011-12-14,US 98313010 A,2010-12-31,Explicitly regioned memory organization in a network element,,ERICSSON TELEFON AB L M,MEIER STEPHAN;;HATHAWAY ROBERT;;GEWIRTZ EVAN;;ALLEYNE BRIAN;;HO EDWARD,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) (2013-05-08),https://lens.org/058-176-224-731-042,Granted Patent,yes,1,0,4,4,0,G06F12/1009;;G06F2213/0038;;Y02D10/00;;G06F12/0292;;G06F12/1009;;G06F2213/0038;;Y02D10/00,G06F13/40;;G06F9/50;;G06F12/10;;H04L29/12,,0,0,,,,ACTIVE
19,US,B2,US 8402248 B2,055-913-517-237-054,2013-03-19,2013,US 98313010 A,2010-12-31,US 98313010 A,2010-12-31,Explicitly regioned memory organization in a network element,"A network element that includes multiple memory types and memory sizes translates a logical memory address into a physical memory address. A memory access request is received for a data structure with a logical memory address that includes a region identifier that identifies a region that is mapped to one or more memories and is associated with a set of one or more region attributes whose values are based on processing requirements provided by a software programmer and the available memories of the network element. The network element accesses the region mapping table entry corresponding to the region identifier and, using the region attributes that are associated with the region, determines an access target for the request, determines a physical memory address offset within the access target, and generates a physical memory address. The access target includes a target class of memory, an instance within the class of memory, and a particular physical address space of the instance within the class of memory. The physical memory address includes a network routing information portion that includes information to route the physical memory address to the target instance, and includes an address payload portion that includes information to identify the physical address space identified by the subtarget and the physical memory address offset.",MEIER STEPHAN;;HATHAWAY ROBERT;;GEWIRTZ EVAN;;ALLEYNE BRIAN;;HO EDWARD;;ERICSSON TELEFON AB L M,MEIER STEPHAN;;HATHAWAY ROBERT;;GEWIRTZ EVAN;;ALLEYNE BRIAN;;HO EDWARD,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) (2011-03-09),https://lens.org/055-913-517-237-054,Granted Patent,yes,2,3,4,4,0,G06F12/1009;;G06F2213/0038;;Y02D10/00;;G06F12/0292;;G06F12/1009;;G06F2213/0038;;Y02D10/00,G06F12/10,711/206;;711/202,0,0,,,,INACTIVE
20,EP,A1,EP 2472412 A1,052-665-916-093-896,2012-07-04,2012,EP 11193485 A,2011-12-14,US 98313010 A,2010-12-31,Explicitly regioned memory organization in a network element,"A network element that includes multiple memory types and memory sizes translates a logical memory address into a physical memory address. A memory access request is received for a data structure with a logical memory address that includes a region identifier that identifies a region that is mapped to one or more memories and is associated with a set of one or more region attributes whose values are based on processing requirements provided by a software programmer and the available memories of the network element. The network element accesses the region mapping table entry corresponding to the region identifier and, using the region attributes that are associated with the region, determines an access target for the request, determines a physical memory address offset within the access target, and generates a physical memory address. The access target includes a target class of memory, an instance within the class of memory, and a particular physical address space of the instance within the class of memory. The physical memory address includes a network routing information portion that includes information to route the physical memory address to the target instance, and includes an address payload portion that includes information to identify the physical address space identified by the subtarget and the physical memory address offset.
",ERICSSON TELEFON AB L M,MEIER STEPHAN;;HATHAWAY ROBERT;;GEWIRTZ EVAN;;ALLEYNE BRIAN;;HO EDWARD,TELEFONAKTIEBOLAGET L M ERICSSON (PUBL) (2013-05-08),https://lens.org/052-665-916-093-896,Patent Application,yes,1,3,4,4,0,G06F12/1009;;G06F2213/0038;;Y02D10/00;;G06F12/0292;;G06F12/1009;;G06F2213/0038;;Y02D10/00,G06F13/40;;G06F9/50;;G06F12/10;;H04L29/12,,0,0,,,,ACTIVE
21,US,B2,US 8656139 B2,090-571-441-570-994,2014-02-18,2014,US 201113045919 A,2011-03-11,US 201113045919 A,2011-03-11,Digital processor for processing long and short pointers and converting each between a common format,"A digital processor stores pointers of different sizes in memory. The processor, specifically, executes instructions to store a long or short pointer. Long pointers reference any address in the memory's logical address space, while short pointers merely reference any address in a subset of that space. However, short pointers are smaller in size as stored in memory than long pointers. Long pointers thus support relatively large address range capabilities, while short pointers use less memory. The processor also executes instructions to load a long or short pointer into the register file, and does so in a way that does not require the processor to distinguish between the different pointers when executing other instructions. Specifically, the processor converts long and short pointers into a common format for loading into the register file, and converts pointers in the common format back into long or short pointers for storing in the memory.",MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC;;ERICSSON TELEFON AB L M,MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,TELEFONAKTIEBOLAGET LM ERICSSON (PUBL) (2011-03-09),https://lens.org/090-571-441-570-994,Granted Patent,yes,3,8,7,7,0,G06F9/30043;;G06F9/30043;;G06F9/342;;G06F9/342,G06F12/00,711/212,0,0,,,,ACTIVE
22,WO,A2,WO 2012/123866 A2,186-231-539-575-662,2012-09-20,2012,IB 2012051099 W,2012-03-08,US 201113045919 A,2011-03-11,SHORT POINTERS,"A digital processor stores pointers of different sizes in memory. The processor, specifically, executes instructions to store a long or short pointer. Long pointers reference any address in the memory's logical address space, while short pointers merely reference any address in a subset of that space. However, short pointers are smaller in size as stored in memory than long pointers. Long pointers thus support relatively large address range capabilities, while short pointers use less memory. The processor also executes instructions to load a long or short pointer into the register file, and does so in a way that does not require the processor to distinguish between the different pointers when executing other instructions. Specifically, the processor converts long and short pointers into a common format for loading into the register file, and converts pointers in the common format back into long or short pointers for storing in the memory.",ERICSSON TELEFON AB L M;;MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,,https://lens.org/186-231-539-575-662,Patent Application,yes,0,7,7,7,0,G06F9/30043;;G06F9/342;;G06F9/30043;;G06F9/342,G06F9/34;;G06F9/30,,0,0,,,,PENDING
23,US,A1,US 2012/0233414 A1,112-817-033-613-418,2012-09-13,2012,US 201113045919 A,2011-03-11,US 201113045919 A,2011-03-11,SHORT POINTERS,"A digital processor stores pointers of different sizes in memory. The processor, specifically, executes instructions to store a long or short pointer. Long pointers reference any address in the memory's logical address space, while short pointers merely reference any address in a subset of that space. However, short pointers are smaller in size as stored in memory than long pointers. Long pointers thus support relatively large address range capabilities, while short pointers use less memory. The processor also executes instructions to load a long or short pointer into the register file, and does so in a way that does not require the processor to distinguish between the different pointers when executing other instructions. Specifically, the processor converts long and short pointers into a common format for loading into the register file, and converts pointers in the common format back into long or short pointers for storing in the memory.",MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,TELEFONAKTIEBOLAGET LM ERICSSON (PUBL) (2011-03-09),https://lens.org/112-817-033-613-418,Patent Application,yes,3,13,7,7,0,G06F9/30043;;G06F9/30043;;G06F9/342;;G06F9/342,G06F12/00,711/154;;X711E12001,0,0,,,,ACTIVE
24,CN,A,CN 103547995 A,187-418-882-615-576,2014-01-29,2014,CN 201280012977 A,2012-03-08,IB 2012051099 W;;US 201113045919 A,2011-03-11,Short pointers,"A digital processor stores pointers of different sizes in memory. The processor, specifically, executes instructions to store a long or short pointer. Long pointers reference any address in the memory's logical address space, while short pointers merely reference any address in a subset of that space. However, short pointers are smaller in size as stored in memory than long pointers. Long pointers thus support relatively large address range capabilities, while short pointers use less memory. The processor also executes instructions to load a long or short pointer into the register file, and does so in a way that does not require the processor to distinguish between the different pointers when executing other instructions. Specifically, the processor converts long and short pointers into a common format for loading into the register file, and converts pointers in the common format back into long or short pointers for storing in the memory.",ERICSSON TELEFON AB L M,MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,,https://lens.org/187-418-882-615-576,Patent Application,no,4,0,7,7,0,G06F9/30043;;G06F9/30043;;G06F9/342;;G06F9/342,G06F9/30;;G06F9/34,,0,0,,,,INACTIVE
25,EP,A2,EP 2684124 A2,072-442-346-552-962,2014-01-15,2014,EP 12712362 A,2012-03-08,US 201113045919 A;;IB 2012051099 W,2011-03-11,DIGITAL PROCESSOR FOR PROCESSING LONG AND SHORT POINTERS AND CONVERTING EACH BETWEEN A COMMON FORMAT AND METHOD THEREFOR,,ERICSSON TELEFON AB L M,MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,,https://lens.org/072-442-346-552-962,Patent Application,yes,0,0,7,7,0,G06F9/30043;;G06F9/30043;;G06F9/342;;G06F9/342,G06F9/30;;G06F9/34,,1,0,,,See references of WO 2012123866A2,DISCONTINUED
26,WO,A3,WO 2012/123866 A3,163-314-110-566-551,2012-11-08,2012,IB 2012051099 W,2012-03-08,US 201113045919 A,2011-03-11,SHORT AND LONG POINTERS,"A digital processor stores pointers of different sizes in memory. The processor, specifically, executes instructions to store a long or short pointer. Long pointers reference any address in the memory's logical address space, while short pointers merely reference any address in a subset of that space. However, short pointers are smaller in size as stored in memory than long pointers. Long pointers thus support relatively large address range capabilities, while short pointers use less memory. The processor also executes instructions to load a long or short pointer into the register file, and does so in a way that does not require the processor to distinguish between the different pointers when executing other instructions. Specifically, the processor converts long and short pointers into a common format for loading into the register file, and converts pointers in the common format back into long or short pointers for storing in the memory.",ERICSSON TELEFON AB L M;;MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,MEIER STEPHAN;;FAVOR JOHN G;;GEWIRTZ EVAN;;HATHAWAY ROBERT;;TREHUS ERIC,,https://lens.org/163-314-110-566-551,Search Report,yes,3,0,7,7,0,G06F9/30043;;G06F9/30043;;G06F9/342;;G06F9/342,G06F9/30;;G06F9/34,,1,1,057-091-591-804-603,10.1109/mm.1985.304507,"KHALED A EL-AYAT ET AL: ""The Intel 80386 - Architecture And Implementation"", IEEE MICRO, IEEE SERVICE CENTER, LOS ALAMITOS, CA, US, vol. 5, no. 6, 1 December 1985 (1985-12-01), pages 4 - 22, XP011359009, ISSN: 0272-1732, DOI: 10.1109/MM.1985.304507",PENDING
